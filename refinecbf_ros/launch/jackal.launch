<?xml version="1.0"?>

<launch>
<!-- Topics that need to be chosen by user and can be varied-->

    <!-- Whether we want to use nominal / external control or a safety filter -->
  <arg name="safety_filter_active" default="True" />
  
    <!-- Whether we want a single fixed value function (no updating) or updating using hj_reachability_node -->
  <arg name="update_vf_online" default="True" /> 
  
    <!-- What type of initial value function do we have
         This only is relevant if the safety_filter_active = True
         Options: 
          1. cbf:   Load as CBF with parameters set in CBF yaml file
          2. file:  Load as state_discretized value function 
          3. sdf:   Have the signed distance function be used 
    -->
  <arg name="vf_initialization_method" default="cbf" />
  
    <!-- Simulation or hardware -->
  <arg name="hardware" default="True" />

  <!-- Teleop Active or Not-->
  <arg name="teleop" default="False" />


    <!-- What message passing method to use
          Options:
           1. pubsub:   flattens the vf and passes it 
           2. file:     Saves it as a file and pubsubs a Boolean
    -->
  <arg name="vf_update_method" default="pubsub" />
  <arg name="vf_update_accuracy" default="high" />

    <!-- Choose which files to load to describe the environment -->
  <arg name="env_config_file" default="Experiment3/env.yaml" />
  
    <!-- Choose which files to load to describe the refinecbf internal nominal controller -->
  <arg name="control_config_file" default="Experiment3/control.yaml" />

    <!-- Choose the name of CBF parameter file or initial vf file -->
  <arg name="CBF_parameter_file" default="Experiment3/CBF_params.yaml" />
  <arg name="initial_vf_file" default="jackal_vf.npy" />

    <!-- Choose the Nominal Controller to be used. Options: PD or HJR-->
  <arg name="nominal_controller_type" default="PD" />

  <!-- ___________________________________________________________________________________________________________ -->
  <!-- Topics that are typically fixed and are shared between different launch files -->
  <arg name="robot_state_topic" value="/sim_state" unless="$(arg hardware)"/>
  <arg name="robot_state_topic" value="/natnet_ros/robot_1/pose" if="$(arg hardware)"/>
  <arg name="cbf_state_topic" value="/safety_filter/state" />

  <arg name="disturbance_update_topic" value="/env/disturbance_update" />
  <arg name="actuation_update_topic" value="/env/actuation_update" />
  <arg name="sdf_update_topic" value="/env/sdf_update" />
  <arg name="vf_update_topic" value="/safety_filter/vf_update" />

  <arg name="robot_safe_control_topic" value="/robot/final_control" unless="$(arg hardware)"/>
  <arg name="robot_safe_control_topic" value="/jackal_velocity_controller/cmd_vel" if="$(arg hardware)"/>
  <arg name="cbf_safe_control_topic" value="/safety_filter/safe_control" />
  <arg name="cbf_nominal_control_topic" value="/safety_filter/nominal_control" />

  <arg name="obstacle_marker_topic" value="/visualization/obstacle_marker" />
  <arg name="sdf_marker_topic" value="/visualization/sdf_marker" />
  <arg name="vf_marker_topic" value="/visualization/vf_marker" />
  <arg name="goal_marker_topic" value="/visualization/goal_marker" />
  <arg name="obstacle_update_topic" value="/visualization/obstacle_update" />

  <!-- Services -->
  <arg name="activate_obstacle_service" value="/env/activate_obstacle" />

  <!-- Could be either set to intercepting the teleop commands or remapping jackal packages -->
  <arg name="robot_external_control_topic" value="/teleop_control" />
  <arg name="cbf_external_control_topic" value="/safety_filter/external_control" />
  <arg name="publish_external_control_flag" value="/safety_filter/externally_controlled" />


  <arg name="config_file_loc" value="$(find refinecbf_ros)/config/Jackal/$(arg env_config_file)" />
  <rosparam ns="env" file="$(arg config_file_loc)" command="load" />
  
  <arg name="control_config_file_loc"
    value="$(find refinecbf_ros)/config/Jackal/$(arg control_config_file)" />
  <rosparam ns="ctr" file="$(arg control_config_file_loc)" />

  <!-- ___________________________________________________________________________________________________________ -->
  <!-- Below: all the nodes being loaded -->
  <!-- <group if="$(eval arg('hardware') == 1)">
    <include file="$(find natnet_ros_cpp)/launch/natnet_ros.launch"/>
  </group> -->

  <group if="$(eval arg('hardware') == 0)">
    <remap from="/jackal_velocity_controller/cmd_vel" to="$(arg robot_safe_control_topic)" />
    <include file="$(find jackal_gazebo)/launch/empty_world.launch">
      <arg name="joystick" value="false" />
      <arg name="gui" value="false" />
    </include>
  </group>

  <group if="$(eval arg('hardware') == 0)">
    <node name="jackal_teleoperation"
      pkg="refinecbf_ros"
      type="tf_to_subscriber.py"
      output="screen">
    </node>
  </group>

  <group>
    <param name="use_gui" value="true"/>
    <arg name="config" default="jackal_rviz" />
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find refinecbf_ros)/rviz/$(arg config).rviz" />
  </group>

  <node name="jackal_nominal_control"
    pkg="refinecbf_ros"
    type="jackal_nominal_controller.py"
    output="screen"
    ns="safety_filter">
    <param name="topics/state" value="$(arg cbf_state_topic)" />
    <param name="topics/nominal_control" value="$(arg cbf_nominal_control_topic)" />
    <param name="topics/external_control" value="$(arg cbf_external_control_topic)" />
    <param name="topics/publish_external_control_flag" value="$(arg publish_external_control_flag)" />
    <param name="controller_type" value="$(arg nominal_controller_type)" />
  </node>

  <node name="jackal_hw_interface"
    pkg="refinecbf_ros"
    type="jackal_hw_interface.py"
    output="screen">
    <param name="topics/robot_state" value="$(arg robot_state_topic)" />
    <param name="topics/cbf_state" value="$(arg cbf_state_topic)" />
    <param name="topics/robot_safe_control" value="$(arg robot_safe_control_topic)" />
    <param name="topics/cbf_safe_control" value="$(arg cbf_safe_control_topic)" />
    <param name="topics/robot_external_control" value="$(arg robot_external_control_topic)" />
    <param name="topics/cbf_external_control" value="$(arg cbf_external_control_topic)" />
    <param name="hardware" value="$(arg hardware)" />
  </node>

  <node name="obstacle_node"
    pkg="refinecbf_ros"
    type="obstacle_node.py"
    output="screen">
    <param name="topics/sdf_update" value="$(arg sdf_update_topic)" />
    <param name="topics/cbf_state" value="$(arg cbf_state_topic)" />
    <param name="topics/obstacle_update" value="$(arg obstacle_update_topic)" />
    <param name="services/activate_obstacle" value="$(arg activate_obstacle_service)" />
    <param name="vf_update_method" value="$(arg vf_update_method)" />
  </node>

  <node name="jackal_visualization"
    pkg="refinecbf_ros"
    type="jackal_visualization.py"
    output="screen">
    <param name="topics/sdf_update" value="$(arg sdf_update_topic)" />
    <param name="topics/cbf_state" value="$(arg cbf_state_topic)" />
    <param name="topics/vf_update" value="$(arg vf_update_topic)" />
    <param name="topics/obstacle_update" value="$(arg obstacle_update_topic)" />
    <param name="topics/obstacle_marker" value="$(arg obstacle_marker_topic)" />
    <param name="topics/sdf_marker" value="$(arg sdf_marker_topic)" />
    <param name="topics/vf_marker" value="$(arg vf_marker_topic)" />
    <param name="topics/goal_marker" value="$(arg goal_marker_topic)" />
    <param name="vf_update_method" value="$(arg vf_update_method)" />
  </node>


  <include file="$(find refinecbf_ros)/launch/refine_cbf.launch">
    <arg name="cbf_state_topic" value="$(arg cbf_state_topic)" />
    <arg name="cbf_nominal_control_topic" value="$(arg cbf_nominal_control_topic)" />
    <arg name="cbf_safe_control_topic" value="$(arg cbf_safe_control_topic)" />
    <arg name="vf_update_topic" value="$(arg vf_update_topic)" />
    <arg name="actuation_update_topic" value="$(arg actuation_update_topic)" />
    <arg name="sdf_update_topic" value="$(arg sdf_update_topic)" />
    <arg name="disturbance_update_topic" value="$(arg disturbance_update_topic)" />
    <arg name="safety_filter_active" value="$(arg safety_filter_active)" />
    <arg name="vf_initialization_method" value="$(arg vf_initialization_method)"/>
    <arg name="update_vf_online" value="$(arg update_vf_online)" />
    <arg name="CBF_parameter_file" value="Jackal/$(arg CBF_parameter_file)" />
    <arg name="initial_vf_file" value="$(arg initial_vf_file)" />
    <arg name="vf_update_method" value="$(arg vf_update_method)" />
    <arg name="vf_update_accuracy" value="$(arg vf_update_accuracy)" />
  </include>

  <group if="$(eval arg('hardware') == 0)">
    <remap from="$(arg robot_external_control_topic)" to="$(arg robot_safe_control_topic)" />
    <include file="$(find jackal_gazebo)/launch/empty_world.launch">
      <arg name="joystick" value="false" />
    </include>
  </group>

  <!-- <include file="$(find jackal_viz)/launch/view_robot.launch"/> -->
  <group>
    <param name="use_gui" value="true"/>
    <arg name="config" default="jackal_rviz" />
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find refinecbf_ros)/rviz/$(arg config).rviz" />
  </group>

</launch>